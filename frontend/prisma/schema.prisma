// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// NextAuth.js 所需的表
model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

// 用户系统
model User {
  id            String    @id @default(cuid())
  email         String    @unique
  username      String?   @unique
  name          String?
  avatar        String?
  password      String?   // for credentials provider
  role          UserRole  @default(FREE)
  isActive      Boolean   @default(true)
  emailVerified DateTime? @map("email_verified")

  // NextAuth.js 关联
  accounts Account[]
  sessions Session[]

  // 业务关联
  subscription     Subscription?
  learningProgress LearningProgress[]
  watchlists       Watchlist[]
  apiKeys          ApiKey[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("users")
}

enum UserRole {
  FREE
  PRO
  ENTERPRISE
  ADMIN
}

// 订阅系统
model Subscription {
  id                 String             @id @default(cuid())
  userId             String             @unique @map("user_id")
  user               User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  plan               SubscriptionPlan
  status             SubscriptionStatus
  currentPeriodStart DateTime           @map("current_period_start")
  currentPeriodEnd   DateTime           @map("current_period_end")
  cancelAtPeriodEnd  Boolean            @default(false) @map("cancel_at_period_end")

  // 支付集成
  stripeCustomerId     String? @map("stripe_customer_id")
  stripeSubscriptionId String? @map("stripe_subscription_id")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("subscriptions")
}

enum SubscriptionPlan {
  FREE
  PRO
  ENTERPRISE
}

enum SubscriptionStatus {
  ACTIVE
  CANCELED
  PAST_DUE
  UNPAID
  INCOMPLETE
}

// 教育内容系统
model CourseCategory {
  id      String   @id @default(cuid())
  name    String   @unique
  slug    String   @unique
  courses Course[]

  createdAt DateTime @default(now()) @map("created_at")

  @@map("course_categories")
}

model Course {
  id          String   @id @default(cuid())
  title       String
  slug        String   @unique
  description String?
  content     String   @db.Text // Markdown content
  excerpt     String?  // 摘要

  // 分类
  category   CourseCategory @relation(fields: [categoryId], references: [id])
  categoryId String         @map("category_id")
  tags       CourseTag[]

  // 学习相关
  difficulty Difficulty
  duration   Int?       // 预估学习时间(分钟)
  order      Int        @default(0) // 排序

  // 状态
  isPublished Boolean @default(false) @map("is_published")
  isFeatured  Boolean @default(false) @map("is_featured")

  // SEO
  metaTitle       String? @map("meta_title")
  metaDescription String? @map("meta_description")

  // 关联
  learningProgress LearningProgress[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("courses")
}

model CourseTag {
  id      String   @id @default(cuid())
  name    String   @unique
  courses Course[]

  @@map("course_tags")
}

enum Difficulty {
  BEGINNER
  INTERMEDIATE
  ADVANCED
}

model LearningProgress {
  id       String  @id @default(cuid())
  userId   String  @map("user_id")
  user     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  courseId String  @map("course_id")
  course   Course  @relation(fields: [courseId], references: [id], onDelete: Cascade)
  progress Float   @default(0) // 0-100
  completed Boolean @default(false)

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@unique([userId, courseId])
  @@map("learning_progress")
}

// 市场数据系统
model Symbol {
  id       String    @id @default(cuid())
  symbol   String    @unique // AAPL, BTC-USD
  name     String // Apple Inc.
  exchange String // NASDAQ
  type     AssetType
  currency String    @default("USD")

  // 元数据
  description String?
  website     String?
  sector      String?
  industry    String?

  // 缓存数据
  lastPrice  Float?
  lastUpdate DateTime? @map("last_update")

  // 关联
  watchlistItems WatchlistItem[]
  priceHistory   PriceHistory[]

  isActive  Boolean  @default(true) @map("is_active")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("symbols")
}

enum AssetType {
  STOCK
  CRYPTO
  FOREX
  INDEX
  COMMODITY
}

model PriceHistory {
  id       String       @id @default(cuid())
  symbolId String       @map("symbol_id")
  symbol   Symbol       @relation(fields: [symbolId], references: [id], onDelete: Cascade)
  timestamp DateTime
  open     Float
  high     Float
  low      Float
  close    Float
  volume   Float?
  interval TimeInterval

  @@unique([symbolId, timestamp, interval])
  @@map("price_history")
}

enum TimeInterval {
  ONE_MINUTE
  FIVE_MINUTES
  FIFTEEN_MINUTES
  ONE_HOUR
  FOUR_HOURS
  ONE_DAY
  ONE_WEEK
}

// 观察列表
model Watchlist {
  id          String          @id @default(cuid())
  userId      String          @map("user_id")
  user        User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  name        String
  description String?
  isDefault   Boolean         @default(false) @map("is_default")
  items       WatchlistItem[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("watchlists")
}

model WatchlistItem {
  id          String    @id @default(cuid())
  watchlistId String    @map("watchlist_id")
  watchlist   Watchlist @relation(fields: [watchlistId], references: [id], onDelete: Cascade)
  symbolId    String    @map("symbol_id")
  symbol      Symbol    @relation(fields: [symbolId], references: [id], onDelete: Cascade)
  order       Int       @default(0)
  notes       String?

  createdAt DateTime @default(now()) @map("created_at")

  @@unique([watchlistId, symbolId])
  @@map("watchlist_items")
}

// API 管理
model ApiKey {
  id          String          @id @default(cuid())
  userId      String          @map("user_id")
  user        User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  name        String // API密钥名称
  key         String          @unique // 实际密钥哈希
  permissions ApiPermission[]
  rateLimit   Int             @default(1000) @map("rate_limit") // 每小时请求数
  isActive    Boolean         @default(true) @map("is_active")
  lastUsed    DateTime?       @map("last_used")
  totalRequests Int           @default(0) @map("total_requests")

  // 关联
  usage ApiUsage[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("api_keys")
}

enum ApiPermission {
  MARKET_DATA_READ
  USER_DATA_READ
  USER_DATA_WRITE
  ADMIN_ACCESS
}

model ApiUsage {
  id           String   @id @default(cuid())
  apiKeyId     String   @map("api_key_id")
  apiKey       ApiKey   @relation(fields: [apiKeyId], references: [id], onDelete: Cascade)
  endpoint     String // /api/market/AAPL
  method       String // GET, POST
  timestamp    DateTime @default(now())
  responseTime Int // 响应时间(ms)
  statusCode   Int // HTTP状态码
  rateLimitRemaining Int? @map("rate_limit_remaining")

  @@map("api_usage")
}